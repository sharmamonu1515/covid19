{"version":3,"sources":["components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","components/CountryDetails/TableHeader/TableHeader.js","components/CountryDetails/CountryDetails.jsx","App.jsx","index.js","components/Cards/Cards.module.css","App.module.css","components/Charts/Charts.module.css"],"names":["Cards","props","data","confirmed","recovered","deaths","lastUpdate","displayData","type","total","value","description","className","styles","container","Grid","spacing","jusitfy","map","index","key","item","component","Card","xs","md","cx","card","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","fetchData","a","fetch","then","response","json","fetchDailyData","axios","get","modifiedData","dailyData","date","reportDate","fetchCountryDetails","Countries","countries","Charts","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","CountryPicker","TableHeader","classes","order","orderBy","onRequestSort","TableHead","TableRow","id","numeric","headCell","TableCell","align","sortDirection","TableSortLabel","active","direction","onClick","property","event","visuallyHidden","descendingComparator","b","useStyles","makeStyles","theme","root","width","marginTop","paper","marginBottom","table","minWidth","border","clip","height","margin","overflow","padding","position","top","deathsCell","fontWeight","newCasesCell","formatNumber","number","Intl","NumberFormat","format","CountryDetails","setCountries","countriesData","filteredCountries","filter","countryData","TotalConfirmed","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","getCountriesDetails","React","setOrder","setOrderBy","Paper","TableContainer","Table","TableBody","array","comparator","stabilizedThis","el","sort","stableSort","getComparator","country","CountryCode","Country","App","state","this","setState","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.59ea07ea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = (props) => {\r\n\r\n  const { data:  { confirmed, recovered, deaths, lastUpdate } }= props;\r\n\r\n  if (!confirmed) { return  'Loading...'; }\r\n  \r\n  const displayData = [\r\n    {\r\n      type: 'infected',\r\n      total: confirmed.value,\r\n      description: 'Number of active cases of COVID-19'\r\n    },\r\n    {\r\n      type: 'recovered',\r\n      total: recovered.value,\r\n      description: 'Number of recovered cases of COVID-19'\r\n    },\r\n    {\r\n      type: 'deaths',\r\n      total: deaths.value,\r\n      description: 'Number of deaths caused by COVID-19'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} jusitfy=\"center\">\r\n        {\r\n          displayData.map( (data, index) => (\r\n            <Grid key={index} item component={Card} xs={12} md={3} className={cx(styles.card, styles[data['type']])}>\r\n              <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>{data.type}</Typography>\r\n                <Typography variant=\"h5\">\r\n                  <CountUp start={0} end={data.total} duration={2.5} separator=\",\" />\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                <Typography variant=\"body2\">\r\n                  {data.description}\r\n                </Typography>\r\n              </CardContent>\r\n            </Grid>\r\n          ))\r\n        }\r\n        \r\n        {/* <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={totalConfirmed} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={totalRecovered} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recovered cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={totalDeaths} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid> */}\r\n\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\n// const url = 'https://api.covid19api.com';\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const { confirmed, recovered, deaths, lastUpdate } = await fetch(`https://covid19.mathdro.id/api/`)\r\n      .then(response => response.json());\r\n    return { confirmed, recovered, deaths, lastUpdate }\r\n  } catch (error) {\r\n\r\n  }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get('https://covid19.mathdro.id/api/daily');\r\n    const modifiedData = data.map(dailyData => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n      \r\n  }\r\n}\r\n\r\nexport const fetchCountryDetails = async () => {\r\n  try {\r\n    const { Countries } = await fetch('https://api.covid19api.com/summary').then(response => response.json());\r\n    return { countries: Countries };\r\n  } catch (error) {\r\n    \r\n  }\r\n}","import React, { useEffect,useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = () => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    }\r\n    fetchApi();\r\n  });\r\n\r\n  const lineChart = (\r\n    dailyData.length ? (<Line\r\n      data={{\r\n        labels: dailyData.map(( { date }) => date),\r\n        datasets: [{\r\n          data: dailyData.map(({ confirmed }) => confirmed),\r\n          label: 'Infected',\r\n          borderColor: '#3333ff',\r\n          backgroundColor: 'rgba(0, 0, 255, 0.3)',\r\n          fill: true\r\n        }, {\r\n          data: dailyData.map(({ deaths }) => deaths),\r\n          label: 'Deaths',\r\n          borderColor: 'rgba(255, 0, 0, 0.5)',\r\n          backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n          fill: true\r\n        }]\r\n      }}\r\n    />) : null\r\n  );\r\n\r\n  return <div className={styles.container}>\r\n    {lineChart}\r\n  </div>;\r\n}\r\n\r\nexport default Charts;","import React from 'react';\r\n\r\nconst CountryPicker = () => {\r\n    return <h1>CountryPicker</h1>;\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction TableHeader(props) {\r\n\r\n  const headCells = [\r\n    { id: 'Country', numeric: false, label: 'Country' },\r\n    { id: 'TotalConfirmed', numeric: true, label: 'Total Cases' },\r\n    { id: 'NewConfirmed', numeric: true, label: 'New Cases' },\r\n    { id: 'TotalDeaths', numeric: true, label: 'Total Deaths' },\r\n    { id: 'NewDeaths', numeric: true, label: 'New Deaths' },\r\n    { id: 'TotalRecovered', numeric: true, label: 'Total Recovered' },\r\n    { id: 'NewRecovered', numeric: true, label: 'New Recovered' },\r\n  ];\r\n\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='left'\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nTableHeader.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TableHeader;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableHeader from './TableHeader/TableHeader';\r\n\r\nimport { fetchCountryDetails } from '../../api';\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '90%',\r\n    marginTop: '100px'\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  deathsCell: {\r\n    backgroundColor: 'red',\r\n    color: '#fff',\r\n    fontWeight: 'bold'\r\n  },\r\n  newCasesCell: {\r\n    backgroundColor: '#ffd68b',\r\n  }\r\n}));\r\n\r\nfunction formatNumber(number) {\r\n  return new Intl.NumberFormat().format(number);\r\n}\r\n\r\nconst CountryDetails = () => {\r\n  const [ countries, setCountries ] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getCountriesDetails = async () => {\r\n      const countriesData = await fetchCountryDetails();\r\n      const filteredCountries = countriesData.countries.filter(countryData =>\r\n          countryData.TotalConfirmed > 0 || \r\n          countryData.NewConfirmed > 0 ||\r\n          countryData.TotalDeaths > 0 ||\r\n          countryData.NewDeaths > 0 ||\r\n          countryData.TotalRecovered > 0 ||\r\n          countryData.NewRecovered > 0\r\n      );\r\n      setCountries(filteredCountries);\r\n    }\r\n    getCountriesDetails();\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('desc');\r\n  const [orderBy, setOrderBy] = React.useState('TotalConfirmed');\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table className={classes.table}>\r\n            <TableHeader\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(countries, getComparator(order, orderBy))\r\n                .map((country, index) => {\r\n                  return (\r\n                    <TableRow key={country.CountryCode}>\r\n                      <TableCell align=\"left\">{country.Country}</TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.TotalConfirmed)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={country.NewConfirmed > 0 ? classes.newCasesCell : ''}>\r\n                        {formatNumber(country.NewConfirmed)}{country.NewConfirmed > 0 ? '+' : ''}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.TotalDeaths)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={country.NewDeaths > 0 ? classes.deathsCell : ''}>\r\n                        {formatNumber(country.NewDeaths)}{country.NewDeaths > 0 ? '+' : ''}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.TotalRecovered)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.NewRecovered)}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;","import React from \"react\";\nimport styles from \"./App.module.css\";\n\nimport { Cards, Charts, CountryPicker, CountryDetails } from \"./components\";\n\nimport { fetchData } from \"./api\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n  };\n\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({ data: data });\n  }\n\n\trender() {\n\t\tconst { data } = this.state;\n    return (\n      <div className={styles.container}>\n        <h1>App</h1>\n        <Cards data={data}/>\n        <Charts />\n        <CountryDetails />\n        <CountryPicker />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__21gY8\",\"card\":\"Cards_card__1NQxG\",\"infected\":\"Cards_infected__cLa3J\",\"recovered\":\"Cards_recovered__-KqvV\",\"deaths\":\"Cards_deaths__2XXax\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__nAExG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__17KT3\"};"],"sourceRoot":""}