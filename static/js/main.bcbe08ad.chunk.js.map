{"version":3,"sources":["components/Charts/Charts.module.css","components/CountryDetails/CountryDetails.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","components/CountryDetails/TableHeader/TableHeader.js","components/Search/SearchByCountry.jsx","components/Search/SearchByContinents.jsx","components/CountryDetails/CountryDetails.jsx","App.jsx","index.js","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","props","data","cases","recovered","deaths","updated","displayData","type","total","description","className","styles","container","Grid","spacing","jusitfy","map","index","key","item","component","Card","xs","md","cx","card","CardContent","Typography","color","cardLabel","gutterBottom","variant","start","end","duration","separator","Date","toDateString","url","fetchData","a","fetch","then","response","json","fetchDailyData","axios","get","modifiedData","dailyData","confirmed","date","reportDate","fetchCountryDetails","fetchCountries","country","Country","Charts","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","options","scales","xAxes","display","yAxes","gridLines","drawBorder","CountryPicker","countries","setCountries","fetchAPI","FormControl","formControl","NativeSelect","onChange","event","handleCountryChange","target","value","i","TableHeader","classes","order","orderBy","onRequestSort","TableHead","TableRow","id","numeric","headCell","TableCell","align","sortDirection","TableSortLabel","active","direction","onClick","property","tableHead","visuallyHidden","SearchByCountry","TextField","e","filterCountries","SearchByContinents","continent","Button","size","margin","filterByContinent","descendingComparator","b","useStyles","makeStyles","theme","root","width","marginTop","paper","marginBottom","fontWeight","table","minWidth","border","clip","height","overflow","padding","position","top","success","deathsCell","newCasesCell","formatNumber","number","Intl","NumberFormat","format","CountryDetails","React","countriesCopy","setCountriesCopy","activeContinent","setActiveContinent","setOrder","setOrderBy","countriesData","filteredCountries","filter","countryData","getCountriesDetails","slice","search","toLowerCase","includes","countryInfo","iso2","iso3","Paper","TableContainer","tableContainer","Table","bordercolor","TableBody","array","comparator","stabilizedThis","el","sort","stableSort","getComparator","todayCases","todayDeaths","critical","casesPerOneMillion","deathsPerOneMillion","App","state","this","setState","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcbe08ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__17KT3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"CountryDetails_tableContainer__GGrUY\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = (props) => {\r\n\r\n  const { data:  { cases, recovered, deaths, updated } }= props;\r\n\r\n  if (!cases) { return  'Loading...'; }\r\n  \r\n  const displayData = [\r\n    {\r\n      type: 'infected',\r\n      total: cases,\r\n      description: 'Number of active cases of COVID-19'\r\n    },\r\n    {\r\n      type: 'recovered',\r\n      total: recovered,\r\n      description: 'Number of recovered cases of COVID-19'\r\n    },\r\n    {\r\n      type: 'deaths',\r\n      total: deaths,\r\n      description: 'Number of deaths caused by COVID-19'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} jusitfy=\"center\">\r\n        {\r\n          displayData.map( (data, index) => (\r\n            <Grid key={index} item component={Card} xs={12} md={3} className={cx(styles.card, styles[data['type']])}>\r\n              <CardContent>\r\n                <Typography color=\"textSecondary\" className={styles.cardLabel} gutterBottom>{data.type}</Typography>\r\n                <Typography variant=\"h5\">\r\n                  <CountUp start={0} end={data.total} duration={2.5} separator=\",\" />\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">{new Date(updated).toDateString()}</Typography>\r\n                <Typography variant=\"body2\">\r\n                  {data.description}\r\n                </Typography>\r\n              </CardContent>\r\n            </Grid>\r\n          ))\r\n        }\r\n        \r\n        {/* <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={totalConfirmed} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={totalRecovered} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recovered cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={totalDeaths} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid> */}\r\n\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://corona.lmao.ninja/v2';\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const { cases, recovered, deaths, updated } = await fetch(`${url}/all`)\r\n      .then(response => response.json());\r\n    return { cases, recovered, deaths, updated }\r\n  } catch (error) {\r\n\r\n  }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get('https://covid19.mathdro.id/api/daily');\r\n    const modifiedData = data.map(dailyData => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n      \r\n  }\r\n}\r\n\r\nexport const fetchCountryDetails = async () => {\r\n  try {\r\n    return await fetch(`${url}/countries`).then(response => response.json());\r\n  } catch (error) {\r\n    \r\n  }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data } = await axios.get('https://api.covid19api.com/countries');\r\n    return data.map((country) => country.Country);\r\n  } catch(error) {\r\n\r\n  }\r\n}\r\n\r\n// https://documenter.getpostman.com/view/11144369/Szf6Z9B3?version=latest","import React, { useEffect,useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = () => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    }\r\n    fetchApi();\r\n  });\r\n\r\n  const lineChart = (\r\n    dailyData.length ? (<Line\r\n      data = {\r\n        {\r\n          labels: dailyData.map(( { date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true\r\n          }, {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'rgba(255, 0, 0, 0.5)',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true\r\n          }]\r\n        }}\r\n      options={{\r\n        scales:{\r\n          xAxes: [{\r\n            display: false //this will remove all the x-axis grid lines\r\n          }],\r\n          yAxes: [{\r\n            gridLines: {\r\n                drawBorder: false,\r\n            }\r\n          }]\r\n        }\r\n      }}\r\n    />) : null\r\n  );\r\n\r\n  return <div className={styles.container}>\r\n    {lineChart}\r\n  </div>;\r\n}\r\n\r\nexport default Charts;","import React, { useEffect, useState } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = (props) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    }\r\n    fetchAPI();\r\n  }, [setCountries]);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect onChange={(event) => props.handleCountryChange(event.target.value)}>\r\n        <option value=\"global\">Global</option>\r\n        {\r\n          countries.map((country, i) => <option value={country} key={i}>{country}</option>)\r\n        }\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction TableHeader(props) {\r\n\r\n  const headCells = [\r\n    { id: 'country', numeric: false, label: 'Country' },\r\n    { id: 'cases', numeric: true, label: 'Total Cases' },\r\n    { id: 'todayCases', numeric: true, label: 'New Cases' },\r\n    { id: 'deaths', numeric: true, label: 'Total Deaths' },\r\n    { id: 'todayDeaths', numeric: true, label: 'New Deaths' },\r\n    { id: 'recovered', numeric: true, label: 'Total Recovered' },\r\n    { id: 'active', numeric: true, label: 'Active Cases' },\r\n    { id: 'critical', numeric: true, label: 'Serious' },\r\n    { id: 'casesPerOneMillion', numeric: true, label: 'Total Cases / Per 1M' },\r\n    { id: 'deathsPerOneMillion', numeric: true, label: 'Deaths / Per 1M' },\r\n    // { id: 'tests', numeric: true, label: 'Tests' },\r\n    // { id: 'testsPerOneMillion', numeric: true, label: 'Tests / Per 1M' },\r\n  ];\r\n\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align='left'\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n              className={classes.tableHead}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nTableHeader.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TableHeader;\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst SearchByCountry = (props) => {\r\n  return  <TextField id=\"standard-search\" label=\"Search\" type=\"search\" onChange={ (e) => props.filterCountries(e.target.value)} />\r\n}\r\n\r\nexport default SearchByCountry;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst SearchByContinents = (props) => {\r\n  const continents = [\r\n    { label: 'All', value: 'All' },\r\n    { label: 'Africa', value: 'Africa' },\r\n    { label: 'Asia', value: 'Asia' },\r\n    { label: 'Europe', value: 'Europe' },\r\n    { label: 'North America', value: 'North America' },\r\n    { label: 'Oceania', value: 'Australia/Oceania' },\r\n    { label: 'South America', value: 'South America' },\r\n  ];\r\n\r\n  return continents.map((continent, i) => (\r\n    <Button key={i} variant={continent.value === props.active ? 'outlined' : 'contained'} size=\"small\" className={props.classes.margin} color=\"primary\" onClick={(e) => props.filterByContinent(continent.value)}>{continent.label}</Button>\r\n    )\r\n  )\r\n}\r\n\r\nexport default SearchByContinents;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableHeader from './TableHeader/TableHeader';\r\nimport SearchByCountry from '../Search/SearchByCountry';\r\nimport SearchByContinents from '../Search/SearchByContinents';\r\n\r\nimport { fetchCountryDetails } from '../../api';\r\n\r\nimport styles from './CountryDetails.module.css';\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '95%',\r\n    marginTop: '100px'\r\n  },\r\n  paper: {\r\n    width: '100%',\r\n    marginBottom: theme.spacing(2),\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  tableHead: {\r\n    fontWeight: 'bold',\r\n    color: '#000',\r\n    '&:hover': {\r\n      color: 'rgba(0, 0, 0, 0.7)'\r\n    }\r\n  },\r\n  table: {\r\n    minWidth: 750\r\n  },\r\n  visuallyHidden: {\r\n    border: 1,\r\n    clip: 'rect(0 0 0 0)',\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    position: 'absolute',\r\n    top: 20,\r\n    width: 1,\r\n  },\r\n  success: {\r\n    backgroundColor: 'rgba(118, 251, 118, 0.25)'\r\n  },\r\n  deathsCell: {\r\n    backgroundColor: 'red',\r\n    color: '#fff',\r\n    fontWeight: 'bold'\r\n  },\r\n  newCasesCell: {\r\n    backgroundColor: '#ffd68b',\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  }\r\n}));\r\n\r\nfunction formatNumber(number) {\r\n  return number ? new Intl.NumberFormat().format(number) : '';\r\n}\r\n\r\nconst CountryDetails = () => {\r\n  const [ countries, setCountries ] = React.useState([]);\r\n  const [ countriesCopy, setCountriesCopy ] = React.useState([]);\r\n  const [activeContinent, setActiveContinent] = React.useState('All');\r\n  const [order, setOrder] = React.useState('desc');\r\n  const [orderBy, setOrderBy] = React.useState('cases');\r\n  const classes = useStyles();\r\n\r\n  React.useEffect(() => {\r\n    const getCountriesDetails = async () => {\r\n      const countriesData = await fetchCountryDetails();\r\n      const filteredCountries = countriesData.filter(countryData =>\r\n        countryData.cases > 0\r\n      );\r\n      setCountries(filteredCountries);\r\n      setCountriesCopy(filteredCountries);\r\n    }\r\n    getCountriesDetails();\r\n  }, []);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const filterCountries = (value) => {\r\n    let filteredCountries = [];\r\n    if (value === '') {\r\n      filteredCountries = countriesCopy;\r\n    } else {\r\n      const search = value.toLowerCase();\r\n      filteredCountries = countriesCopy.slice().filter(country => {\r\n        return ((country.country.toLowerCase().includes(search)) ||\r\n          (country.continent && country.continent.toLowerCase().includes(search)) ||\r\n          (country.countryInfo.iso2 && country.countryInfo.iso2.toLowerCase().includes(search)) ||\r\n          (country.countryInfo.iso3 && country.countryInfo.iso3.toLowerCase().includes(search))\r\n        );\r\n      });\r\n    }\r\n    setCountries(filteredCountries);\r\n  }\r\n\r\n  const filterByContinent = (value) => {\r\n    let filteredCountries = [];\r\n    if (value === 'All') {\r\n      filteredCountries = countriesCopy;\r\n    } else {\r\n      filteredCountries = countriesCopy.slice().filter(country => {\r\n        return country.continent && country.continent === value;\r\n      });\r\n    }\r\n    setCountries(filteredCountries);\r\n    setActiveContinent(value);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n     <SearchByContinents filterByContinent={filterByContinent} classes={classes} active={activeContinent} />\r\n      <SearchByCountry filterCountries={filterCountries} className={classes.margin} />\r\n      <Paper className={classes.paper}>\r\n        <TableContainer className={styles.tableContainer}>\r\n          <Table className={classes.table} border={1} bordercolor=\"#e0e0e0\">\r\n            <TableHeader\r\n              classes={classes}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n            />\r\n            <TableBody>\r\n              {stableSort(countries, getComparator(order, orderBy))\r\n                .map((country, index) => {\r\n                  return (\r\n                    <TableRow key={country.country} className={country.cases === country.recovered ? classes.success : ''}>\r\n                      <TableCell align=\"left\">{country.country}</TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.cases)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={country.todayCases ? classes.newCasesCell : ''}>\r\n                        {country.todayCases ? formatNumber(country.todayCases) + '+' : ''}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.deaths)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={country.todayDeaths ? classes.deathsCell : ''}>\r\n                        {country.todayDeaths ? formatNumber(country.todayDeaths) + '+' : ''}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.recovered)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.active)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.critical)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.casesPerOneMillion)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.deathsPerOneMillion)}\r\n                      </TableCell>\r\n                      {/* <TableCell align=\"left\">\r\n                        {formatNumber(country.tests)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">\r\n                        {formatNumber(country.testsPerOneMillion)}\r\n                      </TableCell> */}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;","import React from \"react\";\nimport styles from \"./App.module.css\";\n\nimport { Cards, Charts, CountryPicker, CountryDetails } from \"./components\";\n\nimport { fetchData } from \"./api\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: ''\n  };\n\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({ data: data });\n  }\n\n  handleCountryChange = async (country) => {\n    // fetch data \n    // set state\n  }\n\n\trender() {\n\t\tconst { data } = this.state;\n    return (\n      <div className={styles.container}>\n        <Cards data={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Charts />\n        <CountryDetails />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__21gY8\",\"card\":\"Cards_card__1NQxG\",\"infected\":\"Cards_infected__cLa3J\",\"recovered\":\"Cards_recovered__-KqvV\",\"deaths\":\"Cards_deaths__2XXax\",\"cardLabel\":\"Cards_cardLabel__1t0oy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__nAExG\"};"],"sourceRoot":""}